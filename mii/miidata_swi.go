// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package mii

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"golang.org/x/text/encoding/unicode"
)

type MiidataSwi struct {
	MiiId              []uint8
	MiiName            string
	FontRegion         uint8
	FavoriteColor      uint8
	Gender             uint8
	BodyHeight         uint8
	BodyWeight         uint8
	SpecialType        uint8
	RegionMove         uint8
	FaceType           uint8
	FaceColor          uint8
	FaceWrinkles       uint8
	FaceMakeup         uint8
	HairType           uint8
	HairColor          uint8
	HairFlip           uint8
	EyeType            uint8
	EyeColor           uint8
	EyeSize            uint8
	EyeStretch         uint8
	EyeRotation        uint8
	EyeHorizontal      uint8
	EyeVertical        uint8
	EyebrowType        uint8
	EyebrowColor       uint8
	EyebrowSize        uint8
	EyebrowStretch     uint8
	EyebrowRotation    uint8
	EyebrowHorizontal  uint8
	EyebrowVertical    uint8
	NoseType           uint8
	NoseSize           uint8
	NoseVertical       uint8
	MouthType          uint8
	MouthColor         uint8
	MouthSize          uint8
	MouthStretch       uint8
	MouthVertical      uint8
	FacialHairColor    uint8
	FacialHairBeard    uint8
	FacialHairMustache uint8
	FacialHairSize     uint8
	FacialHairVertical uint8
	GlassesType        uint8
	GlassesColor       uint8
	GlassesSize        uint8
	GlassesVertical    uint8
	MoleEnable         uint8
	MoleSize           uint8
	MoleHorizontal     uint8
	MoleVertical       uint8
	AlwaysZero         uint8
	_io                *kaitai.Stream
	_root              *MiidataSwi
	_parent            interface{}
}

func NewMiidataSwi() *MiidataSwi {
	return &MiidataSwi{}
}

func (this *MiidataSwi) Read(io *kaitai.Stream, parent interface{}, root *MiidataSwi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(16); i++ {
		_ = i
		tmp1, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.MiiId = append(this.MiiId, tmp1)
	}
	tmp2, err := this._io.ReadBytes(int(22))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	tmp3, err := kaitai.BytesToStr(tmp2, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.MiiName = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FontRegion = tmp4
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FavoriteColor = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Gender = tmp6
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.BodyHeight = tmp7
	tmp8, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.BodyWeight = tmp8
	tmp9, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SpecialType = tmp9
	tmp10, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RegionMove = tmp10
	tmp11, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FaceType = tmp11
	tmp12, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FaceColor = tmp12
	tmp13, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FaceWrinkles = tmp13
	tmp14, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FaceMakeup = tmp14
	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HairType = tmp15
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HairColor = tmp16
	tmp17, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HairFlip = tmp17
	tmp18, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeType = tmp18
	tmp19, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeColor = tmp19
	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeSize = tmp20
	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeStretch = tmp21
	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeRotation = tmp22
	tmp23, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeHorizontal = tmp23
	tmp24, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyeVertical = tmp24
	tmp25, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowType = tmp25
	tmp26, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowColor = tmp26
	tmp27, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowSize = tmp27
	tmp28, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowStretch = tmp28
	tmp29, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowRotation = tmp29
	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowHorizontal = tmp30
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EyebrowVertical = tmp31
	tmp32, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NoseType = tmp32
	tmp33, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NoseSize = tmp33
	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NoseVertical = tmp34
	tmp35, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MouthType = tmp35
	tmp36, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MouthColor = tmp36
	tmp37, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MouthSize = tmp37
	tmp38, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MouthStretch = tmp38
	tmp39, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MouthVertical = tmp39
	tmp40, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FacialHairColor = tmp40
	tmp41, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FacialHairBeard = tmp41
	tmp42, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FacialHairMustache = tmp42
	tmp43, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FacialHairSize = tmp43
	tmp44, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FacialHairVertical = tmp44
	tmp45, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.GlassesType = tmp45
	tmp46, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.GlassesColor = tmp46
	tmp47, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.GlassesSize = tmp47
	tmp48, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.GlassesVertical = tmp48
	tmp49, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MoleEnable = tmp49
	tmp50, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MoleSize = tmp50
	tmp51, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MoleHorizontal = tmp51
	tmp52, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MoleVertical = tmp52
	tmp53, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AlwaysZero = tmp53
	return err
}

/**
 * Mii ID. An identifier used to save Miis in most games.
 */

/**
 * Mii name. Can be up to 10 characters long. Different from the Mii name that appears in Super Smash Bros. Ultimate - in that game, this is never seen.
 */

/**
 * Font region. 0 = USA + PAL + JPN, 1 = CHN, 2 = KOR, 3 = TWN.
 */

/**
 * Favorite color. Ranges from 0 to 11.
 */

/**
 * Mii gender. 0 = male, 1 = female.
 */

/**
 * Body height. Ranges from 0 to 127, short to tall.
 */

/**
 * Body weight. Ranges from 0 to 127, small to large.
 */

/**
 * Toggle if the Mii is a Special Mii. Completely unused functionality. Does not allow editing the Mii, or using the Mii in games.
 */

/**
 * Currently unknown.
 */

/**
 * Face shape. Ranges from 0 to 11. Not ordered the same as visible in editor.
 */

/**
 * Skin color. Ranges from 0 to 9. Not ordered the same as visible in editor.
 */

/**
 * Face wrinkles. Ranges from 0 to 11.
 */

/**
 * Face makeup. Ranges from 0 to 11.
 */

/**
 * Hair type. Ranges from 0 to 131. Not ordered the same as visible in editor.
 */

/**
 * Hair color. Ranges from 0 to 99. Not ordered the same as visible in editor.
 */

/**
 * Flip hair. 0 = no, 1 = yes.
 */

/**
 * Eye type. Ranges from 0 to 59. Not ordered the same as visible in editor.
 */

/**
 * Eye color. Ranges from 0 to 99. Not ordered the same as visible in editor.
 */

/**
 * Eye size. Ranges from 0 to 7, small to large.
 */

/**
 * Eye stretch. Ranges from 0 to 6, small to large.
 */

/**
 * Eye rotation. Ranges from 0 to 7, down to up. Note that some eye types have a default rotation.
 */

/**
 * Eye X (horizontal) distance. Ranges from 0 to 12, close to far.
 */

/**
 * Eye Y (vertical) position. Ranges from 18 to 0, low to high.
 */

/**
 * Eyebrow type. Ranges from 0 to 23. Not ordered the same as visible in editor.
 */

/**
 * Eyebrow color. Ranges from 0 to 99. Not ordered the same as visible in editor.
 */

/**
 * Eyebrow size. Ranges from 0 to 8, small to large.
 */

/**
 * Eyebrow stretch. Ranges from 0 to 6, small to large.
 */

/**
 * Eyebrow rotation. Ranges from 0 to 11, down to up. Note that some eyebrow types have a default rotation.
 */

/**
 * Eyebrow X (horizontal) distance. Ranges from 0 to 12, close to far.
 */

/**
 * Eyebrow Y (vertical) distance. Ranges from 18 to 3, low to high.
 */

/**
 * Nose type. Ranges from 0 to 17. Not ordered the same as visible in editor.
 */

/**
 * Nose size. Ranges from 0 to 8, small to large.
 */

/**
 * Nose Y (vertical) position. Ranges from 18 to 0, low to high.
 */

/**
 * Mouth type. Ranges from 0 to 35. Not ordered the same as visible in editor.
 */

/**
 * Mouth color. The default colors are ordered the same as visible in editor, ranging from 19 to 23. The custom colors are not and range from 0 to 99.
 */

/**
 * Mouth size. Ranges from 0 to 8, small to large.
 */

/**
 * Mouth stretch. Ranges from 0 to 6, small to large.
 */

/**
 * Mouth Y (vertical) position. Ranges from 18 to 0, low to high.
 */

/**
 * Facial hair color. Ranges from 0 to 99. Not ordered the same as visible in editor.
 */

/**
 * Beard type. Ranges from 0 to 5.
 */

/**
 * Mustache type. Ranges from 0 to 5.
 */

/**
 * Mustache size. Ranges from 0 to 8, small to large.
 */

/**
 * Mustache Y (vertical) position. Ranges from 16 to 0, low to high.
 */

/**
 * Glasses type. Ranges from 0 to 19. Not ordered the same as visible in editor.
 */

/**
 * Glasses color. Ranges from 0 to 99. Not ordered the same as visible in editor.
 */

/**
 * Glasses size. Ranges from 0 to 7, small to large.
 */

/**
 * Glasses Y (vertical) position. Ranges from 20 to 0, low to high.
 */

/**
 * Enable mole. 0 = no, 1 = yes.
 */

/**
 * Mole size. Ranges from 0 to 8, small to large.
 */

/**
 * Mole X (horizontal) position. Ranges from 0 to 16, left to right.
 */

/**
 * Mole Y (vertical) position. Ranges from 30 to 0, low to high.
 */

/**
 * This value is always set to 0. The Switch does properly document it, though, so it may end up used in some update... but most likely, it will always remain zero.
 */
